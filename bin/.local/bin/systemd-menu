#!/usr/bin/env bash
[[ "${TRACE}" ]] && set -x
set -eu
set -o pipefail

notify_info() {
	notify-send -i info 'systemd' "$*"
}

notify_stop() {
	notify-send -i stop 'systemd' "$*"
}

status() {
	local service="$1"
	if systemctl status --user "${service}" &>/dev/null
	then
		notify_info "$(systemctl --no-pager --user status "${service}")"
	else
		notify_stop "$(systemctl --no-pager --user status "${service}")"
	fi
}

unit_file_state() {
	systemctl show "$1" --property UnitFileState --value
}

gen_main_menu() {
	echo services
	echo timers
	echo daemon-reload
}

gen_services() {
	systemctl list-unit-files --user \
		--no-pager --no-legend \
		-t service
}

gen_timers() {
	systemctl list-unit-files --user \
		--no-pager --no-legend \
		-t timer
}

gen_service_menu() {
	local service state
	service="$1"
	state="$(unit_file_state "${service}")"

	if [[ "${state}" != "static" ]]
	then
		echo "start ${service}"
		echo "stop ${service}"
		echo "restart ${service}"
	fi

	echo "status ${service}"
	echo "enable ${service}"
	echo "disable ${service}"
}

main() {
	if [[ -z "$@" ]]
	then
		gen_main_menu
	else
		local cmd=($1)
		case "${cmd[0]}" in
			daemon-reload)
				coproc systemctl --user daemon-reload & >/dev/null 2>&1
				exec 1>&-
				notify 'daemon-reload'
				;;
			services)
				gen_services
				;;
			timers)
				gen_timers
				;;
			start|stop|restart)
				coproc {
					systemctl --user "${cmd[@]}"
					status "${cmd[1]}"
				}
				exec 1>&-
				;;
			status)
				status "${cmd[1]}"
				;;
			enable)
				local service="${cmd[1]}"
				coproc {
					systemctl enable --user "${service}"
					systemctl start --user "${service}"
					status "${service}"
				}
				exec 1>&-
				;;
			disable)
				local service="${cmd[1]}"
				coproc {
					systemctl disable --user "${service}"
					systemctl stop --user "${service}"
					status "${service}"
				}
				exec 1>&-
				;;
			*.service)
				gen_service_menu "${cmd[0]}"
				;;
		esac
	fi
}

main "$@"
